// <auto-generated />
using System;
using DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Eshop.Migrations
{
    [DbContext(typeof(MainDbContext))]
    partial class MainDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DbColorDbProduct", b =>
                {
                    b.Property<Guid>("DbColorsColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DbProductsProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DbColorsColorId", "DbProductsProductId");

                    b.HasIndex("DbProductsProductId");

                    b.ToTable("DbColorDbProduct");
                });

            modelBuilder.Entity("DbModels.DbBrand", b =>
                {
                    b.Property<Guid>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("DbModels.DbColor", b =>
                {
                    b.Property<Guid>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ColorId");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("DbModels.DbOrder", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DbUserUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderAmount")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderId");

                    b.HasIndex("DbUserUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DbModels.DbProduct", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DbBrandBrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductPrice")
                        .HasColumnType("int");

                    b.Property<int>("ProductRating")
                        .HasColumnType("int");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("DbBrandBrandId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DbModels.DbSize", b =>
                {
                    b.Property<Guid>("SizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SizeStock")
                        .HasColumnType("int");

                    b.Property<int>("SizeValue")
                        .HasColumnType("int");

                    b.HasKey("SizeId");

                    b.ToTable("Sizes");
                });

            modelBuilder.Entity("DbModels.DbUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserPhoneNr")
                        .HasColumnType("int");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DbOrderDbProduct", b =>
                {
                    b.Property<Guid>("DbOrdersOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DbProductsProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DbOrdersOrderId", "DbProductsProductId");

                    b.HasIndex("DbProductsProductId");

                    b.ToTable("DbOrderDbProduct");
                });

            modelBuilder.Entity("DbProductDbSize", b =>
                {
                    b.Property<Guid>("DbProductsProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DbSizesSizeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DbProductsProductId", "DbSizesSizeId");

                    b.HasIndex("DbSizesSizeId");

                    b.ToTable("DbProductDbSize");
                });

            modelBuilder.Entity("DbColorDbProduct", b =>
                {
                    b.HasOne("DbModels.DbColor", null)
                        .WithMany()
                        .HasForeignKey("DbColorsColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbModels.DbProduct", null)
                        .WithMany()
                        .HasForeignKey("DbProductsProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DbModels.DbOrder", b =>
                {
                    b.HasOne("DbModels.DbUser", "DbUser")
                        .WithMany("DbOrders")
                        .HasForeignKey("DbUserUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DbUser");
                });

            modelBuilder.Entity("DbModels.DbProduct", b =>
                {
                    b.HasOne("DbModels.DbBrand", "DbBrand")
                        .WithMany("DbProducts")
                        .HasForeignKey("DbBrandBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DbBrand");
                });

            modelBuilder.Entity("DbOrderDbProduct", b =>
                {
                    b.HasOne("DbModels.DbOrder", null)
                        .WithMany()
                        .HasForeignKey("DbOrdersOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbModels.DbProduct", null)
                        .WithMany()
                        .HasForeignKey("DbProductsProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DbProductDbSize", b =>
                {
                    b.HasOne("DbModels.DbProduct", null)
                        .WithMany()
                        .HasForeignKey("DbProductsProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbModels.DbSize", null)
                        .WithMany()
                        .HasForeignKey("DbSizesSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DbModels.DbBrand", b =>
                {
                    b.Navigation("DbProducts");
                });

            modelBuilder.Entity("DbModels.DbUser", b =>
                {
                    b.Navigation("DbOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
