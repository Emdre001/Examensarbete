// <auto-generated />
using System;
using DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Eshop.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20250505111304_inital")]
    partial class inital
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ColorProduct", b =>
                {
                    b.Property<Guid>("ColorsColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductsProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ColorsColorId", "ProductsProductId");

                    b.HasIndex("ProductsProductId");

                    b.ToTable("ColorProduct");
                });

            modelBuilder.Entity("DbColorDbProduct", b =>
                {
                    b.Property<Guid>("DbColorsColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DbProductsProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DbColorsColorId", "DbProductsProductId");

                    b.HasIndex("DbProductsProductId");

                    b.ToTable("DbColorDbProduct");
                });

            modelBuilder.Entity("DbOrderDbProduct", b =>
                {
                    b.Property<Guid>("DbOrdersOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DbProductsProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DbOrdersOrderId", "DbProductsProductId");

                    b.HasIndex("DbProductsProductId");

                    b.ToTable("DbOrderDbProduct");
                });

            modelBuilder.Entity("DbProductDbSize", b =>
                {
                    b.Property<Guid>("DbProductsProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DbSizesSizeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DbProductsProductId", "DbSizesSizeId");

                    b.HasIndex("DbSizesSizeId");

                    b.ToTable("DbProductDbSize");
                });

            modelBuilder.Entity("Models.Brand", b =>
                {
                    b.Property<Guid>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BrandId");

                    b.ToTable("Brand");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Models.Color", b =>
                {
                    b.Property<Guid>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ColorId");

                    b.ToTable("Color");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderAmount")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderDetails")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Order");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProductPrice")
                        .HasColumnType("int");

                    b.Property<int>("ProductRating")
                        .HasColumnType("int");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.ToTable("Product");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Models.Size", b =>
                {
                    b.Property<Guid>("SizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SizeStock")
                        .HasColumnType("int");

                    b.Property<int>("SizeValue")
                        .HasColumnType("int");

                    b.HasKey("SizeId");

                    b.ToTable("Size");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserPhoneNr")
                        .HasColumnType("int");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("User");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.Property<Guid>("OrdersOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductsProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrdersOrderId", "ProductsProductId");

                    b.HasIndex("ProductsProductId");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("ProductSize", b =>
                {
                    b.Property<Guid>("ProductsProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SizesSizeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductsProductId", "SizesSizeId");

                    b.HasIndex("SizesSizeId");

                    b.ToTable("ProductSize");
                });

            modelBuilder.Entity("DbModels.DbBrand", b =>
                {
                    b.HasBaseType("Models.Brand");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("DbModels.DbColor", b =>
                {
                    b.HasBaseType("Models.Color");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("DbModels.DbOrder", b =>
                {
                    b.HasBaseType("Models.Order");

                    b.Property<Guid>("DbUserUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("DbUserUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DbModels.DbProduct", b =>
                {
                    b.HasBaseType("Models.Product");

                    b.Property<Guid>("DbBrandBrandId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("DbBrandBrandId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DbModels.DbSize", b =>
                {
                    b.HasBaseType("Models.Size");

                    b.ToTable("Sizes");
                });

            modelBuilder.Entity("DbModels.DbUser", b =>
                {
                    b.HasBaseType("Models.User");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ColorProduct", b =>
                {
                    b.HasOne("Models.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorsColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DbColorDbProduct", b =>
                {
                    b.HasOne("DbModels.DbColor", null)
                        .WithMany()
                        .HasForeignKey("DbColorsColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbModels.DbProduct", null)
                        .WithMany()
                        .HasForeignKey("DbProductsProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DbOrderDbProduct", b =>
                {
                    b.HasOne("DbModels.DbOrder", null)
                        .WithMany()
                        .HasForeignKey("DbOrdersOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbModels.DbProduct", null)
                        .WithMany()
                        .HasForeignKey("DbProductsProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DbProductDbSize", b =>
                {
                    b.HasOne("DbModels.DbProduct", null)
                        .WithMany()
                        .HasForeignKey("DbProductsProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbModels.DbSize", null)
                        .WithMany()
                        .HasForeignKey("DbSizesSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Order", b =>
                {
                    b.HasOne("Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Product", b =>
                {
                    b.HasOne("Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.HasOne("Models.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductSize", b =>
                {
                    b.HasOne("Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Size", null)
                        .WithMany()
                        .HasForeignKey("SizesSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DbModels.DbBrand", b =>
                {
                    b.HasOne("Models.Brand", null)
                        .WithOne()
                        .HasForeignKey("DbModels.DbBrand", "BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DbModels.DbColor", b =>
                {
                    b.HasOne("Models.Color", null)
                        .WithOne()
                        .HasForeignKey("DbModels.DbColor", "ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DbModels.DbOrder", b =>
                {
                    b.HasOne("DbModels.DbUser", "DbUser")
                        .WithMany("DbOrders")
                        .HasForeignKey("DbUserUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Order", null)
                        .WithOne()
                        .HasForeignKey("DbModels.DbOrder", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DbUser");
                });

            modelBuilder.Entity("DbModels.DbProduct", b =>
                {
                    b.HasOne("DbModels.DbBrand", "DbBrand")
                        .WithMany("DbProducts")
                        .HasForeignKey("DbBrandBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Product", null)
                        .WithOne()
                        .HasForeignKey("DbModels.DbProduct", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DbBrand");
                });

            modelBuilder.Entity("DbModels.DbSize", b =>
                {
                    b.HasOne("Models.Size", null)
                        .WithOne()
                        .HasForeignKey("DbModels.DbSize", "SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DbModels.DbUser", b =>
                {
                    b.HasOne("Models.User", null)
                        .WithOne()
                        .HasForeignKey("DbModels.DbUser", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DbModels.DbBrand", b =>
                {
                    b.Navigation("DbProducts");
                });

            modelBuilder.Entity("DbModels.DbUser", b =>
                {
                    b.Navigation("DbOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
